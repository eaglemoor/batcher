// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: a.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleA_PersonByIDs_FullMethodName = "/a.ExampleA/PersonByIDs"
)

// ExampleAClient is the client API for ExampleA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleAClient interface {
	PersonByIDs(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error)
}

type exampleAClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleAClient(cc grpc.ClientConnInterface) ExampleAClient {
	return &exampleAClient{cc}
}

func (c *exampleAClient) PersonByIDs(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := c.cc.Invoke(ctx, ExampleA_PersonByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleAServer is the server API for ExampleA service.
// All implementations must embed UnimplementedExampleAServer
// for forward compatibility
type ExampleAServer interface {
	PersonByIDs(context.Context, *PersonRequest) (*PersonResponse, error)
	mustEmbedUnimplementedExampleAServer()
}

// UnimplementedExampleAServer must be embedded to have forward compatible implementations.
type UnimplementedExampleAServer struct {
}

func (UnimplementedExampleAServer) PersonByIDs(context.Context, *PersonRequest) (*PersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonByIDs not implemented")
}
func (UnimplementedExampleAServer) mustEmbedUnimplementedExampleAServer() {}

// UnsafeExampleAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleAServer will
// result in compilation errors.
type UnsafeExampleAServer interface {
	mustEmbedUnimplementedExampleAServer()
}

func RegisterExampleAServer(s grpc.ServiceRegistrar, srv ExampleAServer) {
	s.RegisterService(&ExampleA_ServiceDesc, srv)
}

func _ExampleA_PersonByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleAServer).PersonByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleA_PersonByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleAServer).PersonByIDs(ctx, req.(*PersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleA_ServiceDesc is the grpc.ServiceDesc for ExampleA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "a.ExampleA",
	HandlerType: (*ExampleAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PersonByIDs",
			Handler:    _ExampleA_PersonByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "a.proto",
}
